#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define U_TAPPING_TERM 200

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

/ {
    combos {
        compatible = "zmk,combos";

        Delete {
            bindings = <&kp DELETE>;
            key-positions = <22 23>;
            require-prior-idle-ms = <100>;
        };

        CapsWord {
            bindings = <&caps_word>;
            key-positions = <17 18>;
            require-prior-idle-ms = <100>;
        };

        R_Bracket {
            bindings = <&right_bracket>;
            key-positions = <15 16>;
            require-prior-idle-ms = <100>;
            layers = <0 3 1>;
        };

        L_Bracket {
            bindings = <&left_bracket>;
            key-positions = <15 14>;
            require-prior-idle-ms = <100>;
            layers = <0 3 1>;
        };

        R_Par {
            bindings = <&right_parenthesis>;
            key-positions = <20 21>;
            require-prior-idle-ms = <100>;
            layers = <0 3 1>;
        };

        L_Par {
            bindings = <&left_parenthesis>;
            key-positions = <20 19>;
            require-prior-idle-ms = <100>;
            layers = <0 3 1>;
        };

        combo_slash {
            bindings = <&kp SLASH>;
            key-positions = <14 3>;
            require-prior-idle-ms = <100>;
            layers = <0 3 1>;
        };

        combo_backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <21 8>;
            require-prior-idle-ms = <100>;
            layers = <0 3 1>;
        };

        combo_ctrlv {
            bindings = <&kp LC(V)>;
            key-positions = <28 27>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        combo_ctrlc {
            bindings = <&kp LC(C)>;
            key-positions = <27 26>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        combo_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        combo_F1 {
            bindings = <&kp F1>;
            key-positions = <1 13>;
            layers = <0 1 3>;
            require-prior-idle-ms = <200>;
        };

        combo_F2 {
            bindings = <&kp F2>;
            key-positions = <14 2>;
            require-prior-idle-ms = <200>;
            layers = <0 1 3>;
        };

        combo_F3 {
            bindings = <&kp F3>;
            key-positions = <15 3>;
            require-prior-idle-ms = <200>;
            layers = <0 1 3>;
        };

        combo_F4 {
            bindings = <&kp F4>;
            key-positions = <16 4>;
            require-prior-idle-ms = <200>;
            layers = <0 1 3>;
        };

        combo_F5 {
            bindings = <&kp F5>;
            key-positions = <17 5>;
            require-prior-idle-ms = <200>;
            layers = <0 1 3>;
        };

        combo_F6 {
            bindings = <&kp F6>;
            key-positions = <6 18>;
            require-prior-idle-ms = <200>;
            layers = <0 1 3>;
        };

        combo_F7 {
            bindings = <&kp F7>;
            key-positions = <19 7>;
            require-prior-idle-ms = <200>;
            layers = <0 1 3>;
        };

        combo_F8 {
            bindings = <&kp F8>;
            key-positions = <20 8>;
            require-prior-idle-ms = <200>;
            layers = <0 1 3>;
        };

        combo_F9 {
            bindings = <&kp F9>;
            key-positions = <21 9>;
            require-prior-idle-ms = <200>;
            layers = <0 1 3>;
        };

        combo_F10 {
            bindings = <&kp F10>;
            key-positions = <10 22>;
            require-prior-idle-ms = <200>;
            layers = <0 1 3>;
        };
    };

    behaviors {
        u_mt: u_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_mt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        u_lt: u_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_lt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        Shift_Enter: Shift_Enter {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_ENTER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <40>;
            tapping-term-ms = <100>;
        };

        hrm_left: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <130>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 39>;
        };

        hrm_right: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <130>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        period_ex: period_ex {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_EX";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        right_parenthesis: right_parenthesis {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_PARENTHESIS";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_ex: comma_ex {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_EX";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LALT|MOD_RALT)>;
        };

        left_parenthesis: left_parenthesis {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_PARENTHESIS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        question_ex: question_ex {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EX";
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        left_bracket: left_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_BRACKET";
            bindings = <&kp LEFT_BRACKET>, <&kp LEFT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        right_bracket: right_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_BRACKET";
            bindings = <&kp RIGHT_BRACKET>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sticky_layer_ex: sticky_layer_ex {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_LAYER_EX";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <1500>;
            quick-release;
            ignore-modifiers;
        };

        custom_hold_tap_stickylayer: custom_hold_tap_stickylayer {
            compatible = "zmk,behavior-hold-tap";
            label = "CUSTOM_HOLD_TAP_STICKYLAYER";
            bindings = <&mo>, <&sticky_layer_ex>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-while-undecided-linger;
        };

        custom_hold_tap_space: custom_hold_tap_space {
            compatible = "zmk,behavior-hold-tap";
            label = "CUSTOM_HOLD_TAP_SPACE";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            retro-tap;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp TAB         &kp Q                 &kp W                 &kp E              &kp R                   &kp T        &kp Y                             &kp U                    &kp I               &kp O                   &kp P                            &mt LEFT_WIN EQUAL
&kp LEFT_SHIFT  &hrm_left LEFT_GUI A  &hrm_left LEFT_ALT S  &hrm_left LCTRL D  &hrm_left LEFT_SHIFT F  &kp G        &kp H                             &hrm_right LEFT_SHIFT J  &hrm_right RCTRL K  &hrm_right RIGHT_ALT L  &hrm_right RIGHT_GUI APOSTROPHE  &kp BACKSPACE
&kp LCTRL       &kp Z                 &kp X                 &kp C              &kp V                   &kp B        &kp N                             &kp M                    &comma_ex           &period_ex              &question_ex                     &lt 5 MINUS
                                                            &sk LEFT_ALT       &mo 3                   &kp SPACE    &custom_hold_tap_stickylayer 3 3  &kp RET
            >;
        };

        hrm_block {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans       &trans                            &trans  &trans  &trans  &trans   &trans
&trans  &kp A   &kp S   &kp D   &kp F   &trans       &trans                            &kp J   &kp K   &kp L   &kp SQT  &trans
&trans  &trans  &trans  &trans  &trans  &trans       &trans                            &trans  &trans  &trans  &trans   &trans
                        &trans  &mo 3   &kp SPACE    &custom_hold_tap_stickylayer 3 3  &trans
            >;
        };

        Gaming {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans       &trans                            &trans  &trans  &trans  &trans   &trans
&trans  &kp A   &kp S   &kp D   &kp F   &trans       &trans                            &kp J   &kp K   &kp L   &kp SQT  &trans
&trans  &trans  &trans  &trans  &trans  &trans       &trans                            &trans  &trans  &trans  &trans   &trans
                        &trans  &mo 3   &kp SPACE    &custom_hold_tap_stickylayer 3 3  &trans
            >;
        };

        Ex {
            bindings = <
&trans  &kp TILDE  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp INSERT    &kp PAGE_UP    &kp HOME  &kp UP    &kp END    &kp F11  &kp F12
&trans  &kp N0     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &trans        &kp PAGE_DOWN  &kp LEFT  &kp DOWN  &kp RIGHT  &trans   &trans
&trans  &kp GRAVE  &kp N7        &kp N8        &kp N9        &lt 7 B       &tog 2         &trans    &trans    &trans     &trans   &kp PRINTSCREEN
                                 &trans        &trans        &kp SPACE     &tog 1         &trans
            >;
        };

        AUTO-MOUSE {
            bindings = <
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans  &trans
                        &mkp LCLK  &trans  &mkp RCLK    &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        minus_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        settings {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &bootloader
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
